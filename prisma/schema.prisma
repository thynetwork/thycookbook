// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== AUTH MODELS ====================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  bio           String?
  username      String?   @unique
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  comments      Comment[]
  likes         Like[]
  savedRecipes  SavedRecipe[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
}

enum UserRole {
  USER
  CREATOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== RECIPE MODELS ====================

model Recipe {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  description   String?
  ingredients   String      // JSON string of ingredients
  instructions  String      // JSON string of steps
  prepTime      Int?        // in minutes
  cookTime      Int?        // in minutes
  servings      Int?
  difficulty    Difficulty  @default(MEDIUM)
  
  // Media
  thumbnail     String?
  images        String?     // JSON array of image URLs
  videoUrl      String?
  videoEmbedId  String?     // YouTube/Vimeo ID
  
  // Categorization
  cuisine       String?     // e.g., "Italian", "Japanese"
  mealType      String?     // JSON array of MealType values
  dietaryTags   String?     // JSON array: "vegetarian", "vegan", "gluten-free"
  
  // Engagement
  viewCount     Int         @default(0)
  likeCount     Int         @default(0)
  commentCount  Int         @default(0)
  
  // Status
  published     Boolean     @default(false)
  featured      Boolean     @default(false)
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])
  comments      Comment[]
  likes         Like[]
  savedBy       SavedRecipe[]
  
  @@index([slug])
  @@index([userId])
  @@index([categoryId])
  @@index([published])
  @@index([featured])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum MealType {
  BREAKFAST
  BRUNCH
  LUNCH
  DINNER
  SNACK
  DESSERT
  APPETIZER
  QUICK_MEAL
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  recipes     Recipe[]
  
  @@index([slug])
}

// ==================== ENGAGEMENT MODELS ====================

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  @@index([userId])
  @@index([recipeId])
  @@index([parentId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model SavedRecipe {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ==================== AD SPACE MODELS ====================

model AdSpace {
  id              String       @id @default(cuid())
  name            String       // "About Section", "Inline Banner", "Footer Banner"
  slug            String       @unique // "about-section", "inline-banner", "footer-banner"
  description     String?      // Description of where this ad space appears
  location        AdLocation   // Enum for the specific location
  
  // Ad Dimensions (multiple sizes can be supported)
  dimensions      String       // JSON array of dimension objects: [{"width": 300, "height": 250}, {"width": 336, "height": 280}]
  
  // Current Active Ad
  currentAdId     String?
  currentAd       Ad?          @relation("CurrentAd", fields: [currentAdId], references: [id])
  
  // Settings
  isActive        Boolean      @default(true)
  order           Int          @default(0) // Display order if multiple ads in same location
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  ads             Ad[]         @relation("AdSpaceAds")
  
  @@index([slug])
  @@index([location])
  @@index([isActive])
}

enum AdLocation {
  ABOUT_SECTION    // Under "About ThyCookbook" text
  INLINE_BANNER    // Between content sections (Brunch/Lunch)
  FOOTER_BANNER    // Top of footer
}

model Ad {
  id              String       @id @default(cuid())
  name            String       // Internal name for the ad
  
  // Ad Content
  imageUrl        String?      // Image URL for display ads
  htmlContent     String?      // Custom HTML/script for third-party ads
  linkUrl         String?      // Click-through URL
  altText         String?      // Alt text for the image
  
  // Targeting & Scheduling
  startDate       DateTime?    // When ad should start showing
  endDate         DateTime?    // When ad should stop showing
  isActive        Boolean      @default(true)
  
  // Ad Space Assignment
  adSpaceId       String
  adSpace         AdSpace      @relation("AdSpaceAds", fields: [adSpaceId], references: [id], onDelete: Cascade)
  
  // Analytics (tracked via admin site)
  impressions     Int          @default(0)
  clicks          Int          @default(0)
  
  // Advertiser Info (managed by admin)
  advertiserName  String?
  advertiserEmail String?
  campaignId      String?      // External campaign reference
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  currentlyIn     AdSpace[]    @relation("CurrentAd")
  
  @@index([adSpaceId])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
}
